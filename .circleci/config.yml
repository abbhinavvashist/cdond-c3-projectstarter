version: '2.1'
orbs:
  slack: circleci/slack@4.3.0
#########################COMMANDS############################################
commands:
  destroy-environment:
    description: destroy backend & frontend
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: delete S3 content
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflowid>> "
            aws s3 rm s3://udapeople-<<parameters.workflowid>> --recursive --region us-east-1
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      #- revert-migrations:
      #    workflowid: << parameters.workflowid >>

  revert-migrations:
      description: Revert.
      parameters:
        workflowid:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - restore_cache:
            key: backend-build
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/NZEm21xnyfcwt1zYtDzeJr/migration_<< parameters.workflowid >>)
              echo $SUCCESS
              if [[ $SUCCESS == 1 ]];
              then
                cd ~/project/backend
                npm install
                npm run migrations:revert 
              fi 
#####################JOBS###########################################################
jobs:
#########################BUILD-BACKEND####################################
  build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build front-end
            command: |
              # Your code here and here dsdesd
              cd frontend
              npm install
              npm run build
              npm audit fix --audit-level=critical --force
        - save_cache:
            key: frontend-build
            paths: [frontend/node_modules]
#########################BUILD-BACKEND####################################
  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              # Your code here
              cd backend
              npm install
              npm run build
              npm audit fix --audit-level=critical --force    
        - save_cache:
            key: build-backend
            paths: [backend/node_modules ] 
        - run:
            name: Compiled code will be retrieved by deploy-backend.yml 
            command: |
              mkdir /tmp/workspace/
              cp ./backend/package.json /tmp/workspace/
              cd backend/dist
              tar -zcvf /tmp/workspace/backend.tgz ./
              tar -zcvf ./../../backend.tgz ./
        - persist_to_workspace:
            root: /tmp/workspace
            paths:
              - package.json
              - backend.tar.gz 
#########################TESTING-FRONTEND####################################
  test-frontend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [frontend-build]
        # Your job code here
        - run:
            name: Frontend unit test
            command: |
              cd frontend
              sudo npm i
              npm run test

#########################TESTING-BACKEND#####################################
  test-backend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [backend-build]
        # Your job code here
        - run:
            name: test backend
            command: |
              cd backend
              npm i
              npm run test


########################SCANNING-FRONT-END#######################################
  scan-frontend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [frontend-build]
        # Your job code here
        - run:
            name: scanning frontend
            command: |
              cd frontend
              npm i
              npm audit fix --audit-level=critical --force

#######################################SCANNING-BACKEND######################

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout 
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: scanning backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force


################DEPLOY-INFRASTRUCTURE###########################################
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: installing packages
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-east-1

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --region us-east-1

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here  Remove this filter fromm the code below #
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt --region us-east-1
              cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
######################CONFIGURE-INFRASTRUCTURE###############################
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: frontend-build
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["18:55:d6:04:43:15:b6:c1:e5:2d:6f:65:c2:97:c2:94"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible tar gzip curl
            apk update pip3
            pip3 install awscli

      - run:
          name: Configure server
          command: |
            # Your code here
            cd backend
            touch ".env"
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cd ..            
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml -vv

      # Here's where you will add some code to rollback on failure     
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
#########################RUNS-MIGRATIONS#####################################
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      #- image: circleci/node:13.8.0
      - image: cimg/node:18.4.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
      #    # working_directory: /tmp
          command: |
            sudo apt-get update
            sudo apt-get install npm python3 -y 
            sudo apt-get install python3-pip -y
            sudo apt-get install unzip  -y
            sudo pip3 install awscli

      - run:
          name: Configure server
          command: |
            # Your code here
            cd backend
            touch ".env"
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

      - run:
          name: install npm
          command: |
            cd backend
            npm install
            npm run build
      - run:
          name: Run migrations
          no_output_timeout: 20m
          command: |
            # Your code here
            cd backend
            sudo npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            if grep -q "has been executed successfully." backend/migrations_dump.txt
            then
              curl  https://kvdb.io/NZEm21xnyfcwt1zYtDzeJr/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

    # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations    
#########################DEPLOY-FRONTEND#####################################
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: frontend-build
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get install tar -y
            sudo apt-get install gzip -y
            sudo apt-get install git -y
            sudo apt-get install ansible -y

      - run:
          name: Installing the AWS CLI
          command: |
            # your code here
            sudo apt-get update
            sudo apt install python3 -y 
            sudo apt-get install unzip  -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Configure server
          command: |
            # Your code here
            cd backend
            touch ".env"
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

      - run:
          name: get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[*].PublicIpAddress" --output text --region us-east-1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}" >> "frontend/.env"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cat frontend/.env    
       
      - run: 
          name: deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  
    # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations 
#########################DEPLOY-BACKEND######################################
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      #- image: circleci/node:13.8.0
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: backend-build
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["18:55:d6:04:43:15:b6:c1:e5:2d:6f:65:c2:97:c2:94"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install tar, gzip and awscli
          command:  |
            apk add tar gzip 
            apk update pip3
            pip3 install awscli
            apk add --update curl
            apk add --update nodejs npm

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 

      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            echo ENVIROMENT=production > ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm i
            npm run build
            pwd
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
#########################SMOKE-TEST######################################
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run: sleep 60
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update curl nodejs npm  

      - run:
          name: Configure server
          command: |
            # Your code here
            cd backend
            touch ".env"
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text --region us-east-1)
            echo "BACKEND_IP=${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
              #return 2
            else
              return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi

      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
#########################CLOUDFRONT-UPDATE######################################
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update curl nodejs npm  

      - run:
          name: Configure server
          command: |
            # Your code here
            cd backend
            touch ".env"
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query 'Exports[?Name==`WorkflowID`].Value' \
            --no-paginate --output text --region us-east-1)
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
            cat ~/project/OldWorkflowID.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
#########################clean-up##############################################################
  cleanup:
      docker:
        # Docker image here that supports AWS CLI
        - image: python:3.7-alpine3.11
      steps:
        # Checkout code from git
        - checkout
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              pip install awscli
              apk add --update curl nodejs npm  

        - run:
            name: Configure server
            command: |
              # Your code here
              cd backend
              touch ".env"
              echo ENVIRONMENT=production > ".env"
              echo TYPEORM_CONNECTION=postgres >> ".env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
              echo NODE_ENV=production >> ".env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

        - run:
            name: Get old stack workflow id
            command: |
              echo "Hello"
              #cat ~/project/OldWorkflowID.txt
              # your code here
              OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text --region us-east-1)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
              #This is my initial stack old stack frontend
              BLUE_JOB_FRONT=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text --region us-east-1|awk '{print $1}')
              #This is my old stack back
              BLUE_JOB_BACK=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text --region us-east-1|awk '{print $2}')
              echo OldWorkflowID: "${OldWorkflowID}"
              echo "CIRCLE_WORKFLOW_ID:" "${CIRCLE_WORKFLOW_ID:0:7}"
              if [[ "$BLUE_JOB" != "$newJob" ]] 
              then
                # your code here
                  #OLD_BUCKET=$(aws s3 ls | awk 'NR==2' |awk '{print $3}')
                  #aws s3 rm "s3://${OLD_BUCKET}" --recursive
                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  aws cloudformation delete-stack --stack-name "${CIRCLE_WORKFLOW_ID:0:7}"
                  aws cloudformation delete-stack --stack-name "${BLUE_JOB_BACK}"
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]  
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend] 
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]