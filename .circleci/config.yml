version: 2.1

orbs:
  slack: circleci/slack@4.3.0

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack-name:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-${CIRCLE_WORKFLOW_ID:0:7}; then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi
            aws cloudformation delete-stack --stack-name <<parameters.stack-name>>

  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          event:  pass
          template: basic_success_1
          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_error
      - notify_slack_pass

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_error
      - notify_slack_pass

  test-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - restore_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_error
      - notify_slack_pass

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - restore_cache:
          paths:  [backend/node_modules]
          key: backend-build
      - notify_slack_error
      - notify_slack_pass

  scan-frontend:
    docker:
      - image:  circleci/node:13.8.0
    # Docker image here
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
    # Your job code here
      - run:
          name: Scan frontend test
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical --force
            npm audit --audit-level=critical
      - restore_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_error
      - notify_slack_pass

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:  [backend-Build]
      - run:
          name: Scan backend test
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical 
      - notify_slack_error
      - notify_slack_pass

         
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout #checkout code from git
      - run: yum install -y tar #(install dependencies)
      - run: yum install -y gzip #(install dependencies)
      - run:
          name: Ensure back-end infrastructure exists #(deploying backend. get backend ip and save to kvdb for frontend use)
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            URLS=$(aws ec2 describe-instances --region us-east-1 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
            echo "URLS=$URLS" 
            curl https://kvdb.io/8n8zbAmdLLCvQsXzfZXeBp/url_${CIRCLE_WORKFLOW_ID:0:7} -d "$URLS"  
      
      - run:
          name: Ensure front-end infrastructure exist #(deploying frontend)
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ec2 ip to ansible inventory file 
          command: |               
            export backend_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=ebackend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt)
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
     #- destroy-environment:
     #    stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
     #- destroy-environment:
     #    stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}    

  configure-infrastructure: # write code to setup EC2 to run as backend
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["18:55:d6:04:43:15:b6:c1:e5:2d:6f:65:c2:97:c2:94"]
      - attach_workspace: # to get access to all files needed e.g. inventory.txt
          at: ~/
      - run: 
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Setup inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl --insecure https://kvdb.io/8n8zbAmdLLCvQsXzfZXeBp/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo $URLS >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml

     #- destroy-environment:
     #    stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
     #- destroy-environment:
     #    stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}       

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install
            sudo apt install ca-certificates
            echo "insecure" >> ~/.curlrc
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            echo ENVIRONMENT=production >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to KVdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/8n8zbAmdLLCvQsXzfZXeBp/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            else
              curl https://kvdb.io/8n8zbAmdLLCvQsXzfZXeBp/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "0"
            fi
            SUCCESS=$(curl --insecure https://kvdb.io/8n8zbAmdLLCvQsXzfZXeBp/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo "${SUCCESS}" 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
     #- destroy-environment:
     #    stack-name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
     #- destroy-environment:
     #    stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}    
     #- revert-migrations:
     #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]  