version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
             aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
             aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
             # Your KVDB GET URL code goes here
             # See an example below
             SUCCESS=$(curl --insecure  https://kvdb.io/8n8zbAmdLLCvQsXzfZXeBp/migration_<< parameters.workflowid >>)
             if (( $SUCCESS == 1 ));
             then
             cd ~/project/backend
             npm install
             npm run migrations:revert
             fi  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache      
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Run Frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache      
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run backen test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache      
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Run Frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache      
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run backen scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install utilties
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --region=us-east-1  \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --region=us-east-1  \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprintt
      - add_ssh_keys:
          fingerprints:
            - "fb:37:85:ce:0b:ca:dd:b3:ca:41:c8:71:3e:b6:ed:ca"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure     
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from gitt
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/8n8zbAmdLLCvQsXzfZXeBp/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            else
              curl https://kvdb.io/8n8zbAmdLLCvQsXzfZXeBp/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "0"
            fi
     # Here's where you will add some code to rollback on failureeeeee 
      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}




  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install zip unzip python ansible python-pip && pip install awscli         
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo ENVIRONMENT=production > frontend/.env
            echo NODE_ENV=production >> frontend/.env
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            ls -larth
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 cp .env s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} 
            
      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

          
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fb:37:85:ce:0b:ca:dd:b3:ca:41:c8:71:3e:b6:ed:ca"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install zip unzip python ansible python-pip && pip install awscli
      - run:
          name: Deploy backend
          command: |
           cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -cf artifact.tar .
            ls -lrth artifact.tar
            mv artifact.tar ~/project/.circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend ansible
          command: |           
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt 
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-backend.yml -vv
      - run:
          name: Install Prometheus 
          command: |           
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt 
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-Prometheus.yml -vv
            
            
            
      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install curl python python-pip && pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            pwd
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
            exit 0
            else
            exit 1
            fi
      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID > ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            
            # Change the initial stack name, as applicable to you            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt
      # Here's where you will add some code to rollback on failuree 
      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            
      # attach workspace
      - attach_workspace:
          at: ~/      
      - run:
          name: Remove old stacks and files
          command: |
            # your code here           
            # Fetch the Old workflow ID
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID:"${OldWorkflowID}"
            
            export CurrentWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo CurrentWorkflowID:"${CurrentWorkflowID}"
            
            echo "udapeople-${OldWorkflowID}"
            echo "udapeople-backend-${OldWorkflowID}"
            echo "udapeople-frontend-${OldWorkflowID}"
            
            if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
            then
                echo "i am in"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
             else
                echo "i am out"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]  
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend] 
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]  